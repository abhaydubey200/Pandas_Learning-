üìò What is NumPy?
NumPy (Numerical Python) is a powerful Python library used for:

Fast mathematical operations on large datasets

Efficient multi-dimensional arrays (ndarray)

Linear algebra, statistics, and data preprocessing

üí° It's the foundation for Pandas, SciPy, Scikit-learn, etc.

üìê Core Concepts (Theory)
Concept	Description
ndarray	Core data structure ‚Äî fast, fixed-size, homogeneous elements
Broadcasting	Auto-expand shapes for operations (e.g., matrix + scalar)
Vectorization	Fast computations without for loops
Memory efficiency	Much faster and memory-efficient than native Python lists
‚öôÔ∏è How to Use NumPy
‚úÖ Importing NumPy
python
Copy
Edit
import numpy as np
üß± Creating Arrays
python
Copy
Edit
np.array([1, 2, 3])                      # 1D array
np.array([[1, 2], [3, 4]])               # 2D array

np.zeros((2, 3))                         # Array of zeros
np.ones((3, 2))                          # Array of ones
np.full((2, 2), 7)                       # Array of sevens
np.eye(3)                                # Identity matrix

np.arange(0, 10, 2)                      # Range with step
np.linspace(0, 1, 5)                     # 5 numbers from 0 to 1
üîÅ Array Operations
python
Copy
Edit
arr.shape                                # Dimensions
arr.size                                 # Total elements
arr.ndim                                 # Number of dimensions
arr.dtype                                # Data type
arr.reshape(2, 3)                        # Change shape
arr.flatten()                            # 2D to 1D
üîÑ Indexing, Slicing, Filtering
python
Copy
Edit
arr[0], arr[-1]                          # Indexing
arr[1:4]                                 # Slicing
arr[arr > 5]                             # Boolean filtering
arr[::2]                                 # Step slicing
üßÆ Math Operations (Element-wise)
python
Copy
Edit
np.add(a, b), a + b                      # Addition
np.subtract(a, b), a - b                 # Subtraction
np.multiply(a, b), a * b                 # Multiplication
np.divide(a, b), a / b                   # Division
np.power(a, 2)                           # Exponentiation
üìä Aggregation Functions
python
Copy
Edit
np.sum(arr), np.mean(arr), np.std(arr)
np.min(arr), np.max(arr), np.median(arr)
np.argmin(arr), np.argmax(arr)
np.cumsum(arr), np.cumprod(arr)
üîß Advanced Functions
python
Copy
Edit
np.sort(arr)                             # Sorting
np.unique(arr)                           # Unique values
np.concatenate([a, b], axis=0)           # Row-wise concat
np.vstack((a, b)), np.hstack((a, b))     # Stack arrays
üß† Linear Algebra (useful in advanced DA/ML)
python
Copy
Edit
np.dot(a, b)                             # Dot product
np.linalg.inv(matrix)                   # Inverse
np.linalg.det(matrix)                   # Determinant
np.linalg.eig(matrix)                   # Eigenvalues
üìÖ Real Data Analysis Examples with NumPy
Task	NumPy Usage
Data Cleaning	Replace, filter, reshape arrays
Preprocessing	Normalize, scale, encode values
Feature Engineering	Create numerical features
Statistics	Mean, median, std deviation
Efficiency	Handle millions of rows quickly
üß† Bonus: Interview-style Questions
What‚Äôs the difference between a list and a NumPy array?

How does broadcasting work in NumPy?

Why is vectorization better than loops in NumPy?

How do you compute row-wise mean of a matrix?

What are some use cases of np.where()?

Would you like:

A PDF of this full guide?

Practice notebook with exercises and solutions?

Project where you can apply NumPy in real data cleaning and analysis?

Let me know, I can prep those for you!







You said:
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
~\AppData\Local\Temp\ipykernel_26148\601549977.py in ?()
----> 1 df1.reshape(2, 3)

~\anaconda3\Lib\site-packages\pandas\core\generic.py in ?(self, name)
   6200             and name not in self._accessors
   6201             and self._info_axis._can_hold_identifiers_and_holds_name(name)
   6202         ):
   6203             return self[name]
-> 6204         return object.__getattribute__(self, name)

AttributeError: 'DataFrame' object has no attribute 'reshape'


ChatGPT said:
You're getting this error because .reshape() is a NumPy method, not a method of a Pandas DataFrame.

‚úÖ Solution
If you want to reshape a Pandas DataFrame, you need to convert it to a NumPy array first:

python
Copy
Edit
import numpy as np

reshaped = df1.values.reshape(2, 3)   # if total elements = 6
Or if using .to_numpy() (recommended):

python
Copy
Edit
reshaped = df1.to_numpy().reshape(2, 3)
‚ö†Ô∏è Important:
Make sure that the total number of elements matches the reshape dimensions. For example, if your DataFrame has 6 elements in total, you can reshape it to (2, 3), (3, 2), etc.

You can check this using:

python
Copy
Edit
df1.size     # should be equal to 2 * 3 = 6 for reshape(2, 3)
